---
title: "sensitivity"
format: 
  pdf:
    keep-tex: true
    include-in-header: 
       text: |
         \usepackage{fvextra}
         \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\},breaklines, breaknonspaceingroup, breakanywhere}
include-before-body:
  text: |
    \RecustomVerbatimEnvironment{verbatim}{Verbatim}{
      showspaces = false,
      showtabs = false,
      breaksymbolleft={},
      breaklines
    }
editor: visual
execute:
  warning: false
  message: false
---

# Getting dependencies

```{r}
#| message: false
#| results: 'hide'
#| fig.keep: 'all'
rm(list=ls())
knitr::purl(input="loon3stages.qmd", output="matrixFunctions.R", documentation=0)
source("matrixFunctions.R")

library(ggpubr)

```

# Hypothetical parameters

```{r}
#| label: hypothetical_parameters 
# Define hypothetical transition parameters
hyp_p3 <- list(
  b_a=0.8,   # adult pairing propensity
  b_y=0.8, # young adult pairing propensity
  m=0.48, # chick production.    
  r=0.5,   #sex ratio   
  sigma_j = 0.45^(12/34), #juv survival
  Pa=0.92,  # Adult survival
  sigma_y=0.92 # young adult survival
)

hyp_p2 <- list(
  b=0.8,   # adult pairing propensity
  m=0.48, # chick production.    
  r=0.5,   #sex ratio   
  sigma_j = 0.45^(12/34), #juv survival
  Pa=0.92  # Adult survival
)
```

# Comparing lambdas

Here I compare lambdas of different matrices. I need to confirm all matrices have the same lambdas when all parameters are the same. This means all matrices are collapsing correctly.

```{r}
#| label: compare_lambda
# construct matrix
matrix2 <- constructMatrix2(hyp_p2)
matrix3 <- constructMatrix3(hyp_p3)
matrix4 <- constructMatrix4(hyp_p2)
matrix7 <- constructMatrix7(hyp_p3)


tibble(lam2,lam4,lam7,lam3) %>% 
  knitr::kable()
```

# Functions

## parameter texts

```{r}
param_text3 <- function(param_list) {
  ggplot() +
    annotate("text", x = 0.5, y = 0.5, 
             label = paste("b_y =", param_list$b_y, "\n",
                           "b_a =", param_list$b_a, "\n",
                           "m =", param_list$m, "\n",
                           "r =",param_list$r,"\n",
                           "sigma_j =", param_list$sigma_j,"\n",
                           "Pa =",param_list$Pa,"\n",
                           "sigma_y =",param_list$sigma_y,"\n"
                           ), 
             size = 4, hjust = 0.5, vjust = 0.5) +
    theme_void()
}

param_text2 <- function(param_list) {
  ggplot() +
    annotate("text", x = 0.5, y = 0.5, 
             label = paste("b =", param_list$b, "\n",
                           "m =", param_list$m, "\n",
                           "r =",param_list$r,"\n",
                           "sigma_j =", param_list$sigma_j,"\n",
                           "Pa =",param_list$Pa
                           ), 
             size = 4, hjust = 0.5, vjust = 0.5) +
    theme_void()
}

```

## Split Pa

Here I split Pa used in 2 \* 2 matrix and into Pa and sigma_y in 3 \* 3 matrix. The function will return a list of all possible combinations of Pa and sigma_y, as well as the numbers of adults and young adults in the stable stage distribution.

p is a list of parameters used for 2 \* 2 matrix.

```{r}
expand_param <- function(p2) {
SSD2<-eigen(constructMatrix2(p2))$vectors[,1]/eigen(constructMatrix2(p2))$vectors[2,1]
N0_2<-Re(SSD2)/sum(Re(SSD2)) * 500
N_combined_adult <- N0_2[2]  # Combined adults= N_a + N_y
combined_Pa <- p2$Pa
# ranges for survival rates
Pa_values <- seq(0.5, 0.95, by = 0.01)       # Adult survival
sigma_y_values <- seq(0.5, 0.95, by = 0.01)  # Young adult survival

# blank results data frame
results <- data.frame(Pa = numeric(), sigma_y = numeric(), N_a = numeric(), N_y = numeric())

# Iterate over combinations of Pa and sigma_y
for (Pa in Pa_values) {
  for (sigma_y in sigma_y_values) {
    # Assume x as the proportion of Adults, that means N_a = x * N_combined_adult, N_y = (1 - x) * N_combined_adult
    for (x in seq(0, 1, by = 0.01)) {
      N_a <- x * N_combined_adult
      N_y <- (1 - x) * N_combined_adult
      
      # Calculate combined_Pa based on this split
      combined_Pa_calculated <- (Pa * N_a + sigma_y * N_y) / N_combined_adult
      
      # Check if the calculated value matches the given combined_Pa
      # cobinations of Pa and sigma_y would only be saved if combined_Pa matches
      if (abs(combined_Pa_calculated - combined_Pa) < 0.001) {
        results <- rbind(results, data.frame(Pa = Pa, sigma_y = sigma_y, N_a = N_a, N_y = N_y))
      }
    }
  }
}
return(results)
}

```

## get all lambdas for Pa and sigma_ys

This function would create a data frame of lambdas generated by all possible combinations of Pa and sigma_y.

p is a list of parameters used for 2\* 2 matrix. survival_df is a data frame with one column of Pa and one column of sigma_y. Each row is one possible combination of Pa and sigma_y.

```{r}
run_multiple_combinations <- function(p, survival_df) {
  # Extract Pa and sigma_y as paired values
  Pa_values <- survival_df$Pa
  sigma_y_values <- survival_df$sigma_y
  
  # Initialize a data frame to store results
  results <- data.frame(Pa = numeric(0), sigma_y = numeric(0), lam3 = numeric(0))
  
  # Iterate through paired combinations
  for (i in 1:length(Pa_values)) {
    Pa <- Pa_values[i]
    sigma_y <- sigma_y_values[i]
    
    # Update the parameter list
    p$sigma_y <- sigma_y
    p$Pa <- Pa
    p$b_a <- p$b
    p$b_y <- p$b
    
    # Run constructMatrix3 and calculate lam3
    three_stage_matrix <- constructMatrix3(p)

    # Store the current lam3 along with Pa and sigma_y
    results <- rbind(results, data.frame(Pa = Pa, sigma_y = sigma_y, lam3 = lam3))
  }
  
  return(results)
}

```

# Plotting lamdas

```{r}
hyp_p3 <- list(
  b_a=0.8,   # adult pairing propensity
  b_y=0.8, # young adult pairing propensity
  m=0.48, # chick production.    
  r=0.5,   #sex ratio   
  sigma_j = 0.45^(12/34), #juv survival
  Pa=0.9,  # Adult survival
  sigma_y=0.9 # young adult survival
)

hyp_p2 <- list(
  b=0.8,   # adult pairing propensity
  m=0.48, # chick production.    
  r=0.5,   #sex ratio   
  sigma_j = 0.45^(12/34), #juv survival
  Pa=0.9  # Adult survival
)
```


## heat map

I first generated a list of potential Pa values in 2 \* 2 matrix. Then, I loop through them and put all heat maps into a list.

```{r}
#| results: 'hide'
#| fig.keep: 'all'
#| fig-width: 8
#| fig-height: 3
Pa_values <- seq(0.7, 0.92, by = 0.02)

heatmap_list <- list()

for (i in 1:length(Pa_values)) {
  hyp_p2$Pa <- Pa_values[i]
  surv_df <- expand_param(hyp_p2)
  all_lam3 <- run_multiple_combinations(hyp_p2, surv_df)
  lam_heat_map <- ggplot(all_lam3, aes(x = sigma_y, y = Pa, fill = lam3)) +
    geom_tile() +                                   
    scale_fill_gradient(low = "blue", high = "red",
                      name = "lambda value") +       
    labs(title = "Heat map of lambda Values",
       x = "Young Adult Survival",
       y = "Adult Survival")
  params <- ggplot() +
    annotate("text", x = 0.5, y = 0.5, 
             label = paste("b =", hyp_p2$b, "\n",
                           "m =", hyp_p2$m, "\n",
                           "r =",hyp_p2$r,"\n",
                           "sigma_j =", hyp_p2$sigma_j,"\n",
                           "combined Pa =",hyp_p2$Pa,"\n",
                           "Pa & sigma_y 0.5-0.95"
                           ), 
             size = 4, hjust = 0.5, vjust = 0.5) +
    theme_void()
  heatmap_list[[i]] <- ggarrange(lam_heat_map,params, ncol = 2, nrow = 1)
}

print(heatmap_list)
```


## different pairing propensity

```{r}
b_value <- seq(0, 0.9, by = 0.02)

  
# Initialize a data frame to store results
all_b_lam3 <- data.frame(b = numeric(0), lam3 = numeric(0))
  
# Iterate through paired combinations
for (i in 1:length(b_value)) {
  b <- b_value[i]
  hyp_p3$b_a <- b
  hyp_p3$b_y <- b
    
  # Run constructMatrix3 and calculate lam3
  three_stage_matrix <- constructMatrix3(hyp_p3)

  # Store the current lam3 along with b
  all_b_lam3 <- rbind(all_b_lam3, data.frame(b = b, lam3 = lam3))}

b_lam_line_plot <- ggplot(all_b_lam3, aes(x = b, y = lam3)) + 
  geom_line()+
  labs(x = "breeding propensity",
        y = "Lambda")+
  scale_x_continuous(limits = c(0, 0.9))+
  scale_y_continuous(limits = c(0.8, 1.05))
params <- ggplot() +
    annotate("text", x = 0.5, y = 0.5, 
             label = paste("m =", hyp_p3$m, "\n",
                           "r =",hyp_p3$r,"\n",
                           "sigma_j =", hyp_p3$sigma_j,"\n",
                           "Pa =",hyp_p3$Pa,"\n",
                           "sigma_y =",hyp_p3$sigma_y,"\n",
                           "b 0-0.9"
                           ), 
             size = 4, hjust = 0.5, vjust = 0.5) +
    theme_void()
  
b_lam_annotated <- ggarrange(b_lam_line_plot,params, ncol = 2, nrow = 1)

```

## different chick production

```{r}
m_value <- seq(0.3, 0.6, by = 0.02)

  
# Initialize a data frame to store results
all_m_lam3 <- data.frame(m = numeric(0), lam3 = numeric(0))
  
# Iterate through paired combinations
for (i in 1:length(m_value)) {
  m <- m_value[i]
  hyp_p3$m <- m
    
  # Run constructMatrix3 and calculate lam3
  three_stage_matrix <- constructMatrix3(hyp_p3)

  # Store the current lam3 along with m
  all_m_lam3 <- rbind(all_m_lam3, data.frame(m = m, lam3 = lam3))}

m_lam_line_plot <- ggplot(all_m_lam3, aes(x = m, y = lam3)) + 
  geom_line()+
  labs(x = "chick production",
        y = "Lambda")+
  scale_x_continuous(limits = c(0.3, 0.6))+
  scale_y_continuous(limits = c(0.8, 1.05))
params <- ggplot() +
    annotate("text", x = 0.5, y = 0.5, 
             label = paste("b_y =", hyp_p3$b_y, "\n",
                           "b_a =", hyp_p3$b_a, "\n",
                           "r =",hyp_p3$r,"\n",
                           "sigma_j =", hyp_p3$sigma_j,"\n",
                           "Pa =",hyp_p3$Pa,"\n",
                           "sigma_y =",hyp_p3$sigma_y,"\n",
                           "m 0.3-0.6"
                           ), 
             size = 4, hjust = 0.5, vjust = 0.5) +
    theme_void()
  
m_lam_annotated <- ggarrange(m_lam_line_plot,params, ncol = 2, nrow = 1)
```

## different sex-ratio

```{r}
r_value <- seq(0.3, 0.6, by = 0.02)

  
# Initialize a data frame to store results
all_r_lam3 <- data.frame(r = numeric(0), lam3 = numeric(0))
  
# Iterate through paired combinations
for (i in 1:length(r_value)) {
  r <- r_value[i]
  hyp_p3$r <- r
    
  # Run constructMatrix3 and calculate lam3
  three_stage_matrix <- constructMatrix3(hyp_p3)

  # Store the current lam3 along with r
  all_r_lam3 <- rbind(all_r_lam3, data.frame(r = r, lam3 = lam3))}

r_lam_line_plot <- ggplot(all_r_lam3, aes(x = r, y = lam3)) + 
  geom_line()+
  labs(x = "sex ratio",
        y = "Lambda")+
  scale_x_continuous(limits = c(0.3, 0.6))+
  scale_y_continuous(limits = c(0.8, 1.05))
params <- ggplot() +
    annotate("text", x = 0.5, y = 0.5, 
             label = paste("b_y =", hyp_p3$b_y, "\n",
                           "b_a =", hyp_p3$b_a, "\n",
                           "m =",hyp_p3$m,"\n",
                           "sigma_j =", hyp_p3$sigma_j,"\n",
                           "Pa =",hyp_p3$Pa,"\n",
                           "sigma_y =",hyp_p3$sigma_y,"\n",
                           "r 0.3-0.6"
                           ), 
             size = 4, hjust = 0.5, vjust = 0.5) +
    theme_void()
  
r_lam_annotated <- ggarrange(r_lam_line_plot,params, ncol = 2, nrow = 1)
```

## different juvenile survival

```{r}

s <- seq(0.2, 0.5, by = 0.02)
sigma_j_value <- s^(12/34)

  
# Initialize a data frame to store results
all_sigma_j_lam3 <- data.frame(sigma_j = numeric(0), lam3 = numeric(0))
  
# Iterate through paired combinations
for (i in 1:length(sigma_j_value)) {
  sigma_j <- sigma_j_value[i]
  hyp_p3$sigma_j <- sigma_j
    
  # Run constructMatrix3 and calculate lam3
  three_stage_matrix <- constructMatrix3(hyp_p3)

  # Store the current lam3 along with r
  all_sigma_j_lam3 <- rbind(all_sigma_j_lam3, data.frame(sigma_j = sigma_j, lam3 = lam3))}

sigma_j_lam_line_plot <- ggplot(all_sigma_j_lam3, aes(x = sigma_j, y = lam3)) + 
  geom_line()+
  labs(x = "juvenile survival",
        y = "Lambda")+
  scale_x_continuous(limits = c(min(sigma_j_value), max(sigma_j_value)))+
  scale_y_continuous(limits = c(0.8, 1.05))

params <- ggplot() +
    annotate("text", x = 0.5, y = 0.5, 
             label = paste("b_y =", hyp_p3$b_y, "\n",
                           "b_a =", hyp_p3$b_a, "\n",
                           "m =",hyp_p3$m,"\n",
                           "r =", hyp_p3$r,"\n",
                           "Pa =",hyp_p3$Pa,"\n",
                           "sigma_y =",hyp_p3$sigma_y,"\n",
                           "sigma_j 0.2-0.5"
                           ), 
             size = 4, hjust = 0.5, vjust = 0.5) +
    theme_void()
  
sigma_j_lam_annotated <- ggarrange(sigma_j_lam_line_plot,params, ncol = 2, nrow = 1)
```

## different young adult pairing propensity

```{r}
b_y_value <- seq(0, 0.9, by = 0.05)

  
# Initialize a data frame to store results
all_b_y_lam3 <- data.frame(b_y = numeric(0), lam3 = numeric(0))
  
# Iterate through paired combinations
for (i in 1:length(b_y_value)) {
  b_y <- b_y_value[i]
  hyp_p3$b_y <- b_y
    
  # Run constructMatrix3 and calculate lam3
  three_stage_matrix <- constructMatrix3(hyp_p3)

  # Store the current lam3 along with b
  all_b_y_lam3 <- rbind(all_b_y_lam3, data.frame(b_y = b_y, lam3 = lam3))}

b_y_lam_line_plot <- ggplot(all_b_y_lam3, aes(x = b_y, y = lam3)) + 
  geom_line()+
  labs(x = " juv breeding propensity",
        y = "Lambda")+
  scale_x_continuous(limits = c(0, 1))+
  scale_y_continuous(limits = c(0.8, 1.05))
params <- ggplot() +
    annotate("text", x = 0.5, y = 0.5, 
             label = paste("b_a =", hyp_p3$b_a, "\n",
                           "m =", hyp_p3$m, "\n",
                           "r =",hyp_p3$r,"\n",
                           "sigma_j =", hyp_p3$sigma_j,"\n",
                           "Pa =",hyp_p3$Pa,"\n",
                           "sigma_y =",hyp_p3$sigma_y,"\n",
                           "b_y 0-0.9"
                           ), 
             size = 4, hjust = 0.5, vjust = 0.5) +
    theme_void()
  
b_y_lam_annotated <- ggarrange(b_y_lam_line_plot,params, ncol = 2, nrow = 1)
```

```{r}
#| results: 'hide'
#| fig.keep: 'all'
#| fig-width: 8
#| fig-height: 3
one_diff_param_plots <- list(b_lam_annotated,
                             m_lam_annotated,
                             r_lam_annotated,
                             sigma_j_lam_annotated,
                             b_y_lam_annotated)
print(one_diff_param_plots)
```

